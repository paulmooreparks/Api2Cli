</ This file is written in XferLang. Learn more at https://xferlang.org/ />

{
    assemblies [
    ]

    </ Set the default workspace that opens in the REPL />
    activeWorkspace "httpbin"

    </ Global properties available to scripts and requests />
    properties {
        hideReplMessages ~true
        sampleValue "This is a sample value"
    }

    </ Global init: convenience helpers available to all scripts />
    initScript <'
        function testFunction(message) {
            console.log("Test function called with message:", message);
        }

        function formatJson(rawJson) {
            try { let obj = (typeof rawJson === 'string') ? JSON.parse(rawJson) : rawJson; return JSON.stringify(obj, null, 2); }
            catch { return String(rawJson); }
        }

        function logHeader(title) {
            console.log("\n=== " + title + " ===");
        }
    '>

    </ Global scripts (JavaScript and C#) />
    scripts {
        hello {
            description "Simple JS script: prints a greeting and returns a value."
            arguments {
                name { type "string" description "Name to greet" default "World" }
            }
            script <'
                logHeader("Hello Script");
                console.log(`Hello, ${name}!`);
                return { greeted: name };
            '>
        }

        csmessage {
            description "C# script: repeat a message n times."
            arguments {
                message { type "string" description "Message to print" default "Hello from C#" }
                count { type "number" description "Times to print" default 1 }
            }
            script csharp <"
                for (var i = 0; i < count; i++) {
                    Console.WriteLine($"[{i+1}] {message}");
                }
                return $"Printed {count} line(s).";
            ">
        }

        </ NuGet demo (C#): requires package 'Newtonsoft.Json'.
           Install once via: a2c package install newtonsoft.json />
        csjson {
            description "C# + NuGet (Newtonsoft.Json): pretty-print an object as JSON."
            arguments {
                message { type "string" description "Message" default "Hi from NuGet" }
            }
            script csharp <"
                var obj = new { message = message, when = DateTime.UtcNow };
                var json = Newtonsoft.Json.JsonConvert.SerializeObject(obj, Newtonsoft.Json.Formatting.Indented);
                Console.WriteLine(json);
                return json;
            ">
        }
    }

    </ Global request hooks />
    preRequest csharp <'
        // You can add headers or tracing here
        // e.g., request.headers["X-Trace"] = Date.now().toString();
        int x = 5;
        Console.WriteLine("In global pre-request");
        Console.WriteLine($"x = {x}");
    '>

    postResponse <'
        // Return the raw body by default
        return request.response.body;
    '>

    </ Two example workspaces showcasing web APIs />
    workspaces {
        httpbin {
            description "Playground for https://httpbin.org"
            baseUrl "https://httpbin.org/"

            scripts {
                showip {
                    description "JS: call GET /ip and print the result."
                    script <'
                        logHeader("httpbin /ip");
                        let body = workspace.requests.ip.execute();
                        console.log(formatJson(body));
                        return body;
                    '>
                }

                roundtrip {
                    description "JS: POST /anything with a JSON payload and return echoed data."
                    arguments {
                        msg { type "string" description "Message to round-trip" default "ping" }
                    }
                    script <'
                        logHeader("httpbin /anything");
                        let body = workspace.requests.anything.execute(msg);
                        console.log(formatJson(body));
                        return body;
                    '>
                }

                csPretty {
                    description "C#: pretty-print the result of GET /get using Newtonsoft.Json (requires package)."
                    script csharp <"
                        // Ensure package installed: a2c package install newtonsoft.json
                        var raw = (string)workspace.requests.get.execute();
                        var parsed = Newtonsoft.Json.Linq.JToken.Parse(raw);
                        var pretty = Newtonsoft.Json.JsonConvert.SerializeObject(parsed, Newtonsoft.Json.Formatting.Indented);
                        Console.WriteLine(pretty);
                        return pretty;
                    ">
                }
            }

            requests {
                ip {
                    endpoint "/ip"
                    method "GET"
                }

                get {
                    endpoint "/get"
                    method "GET"
                    headers { Accept "application/json" }
                    preRequest <'
                        // Example: add a custom header per request
                        request.headers["X-Demo"] = "a2c";
                        nextHandler();
                    '>
                }

                anything {
                    endpoint "/anything"
                    method "POST"
                    headers { Content-Type "application/json" }
                    arguments {
                        msg { type "string" description "Message to send" }
                    }
                    payload <'{ "message": "{{[arg]::msg}}" }'>
                }
            }
        }

        jsonplaceholder {
            description "Sample REST API: https://jsonplaceholder.typicode.com"
            baseUrl "https://jsonplaceholder.typicode.com/"

            scripts {
                listposts {
                    description "JS: list the number of posts (GET /posts)."
                    script <'
                        let body = workspace.requests.posts.execute();
                        let arr = JSON.parse(body);
                        console.log(`There are ${arr.length} posts.`);
                        return arr.length;
                    '>
                }

                getpost {
                    description "JS: fetch a single post by id (GET /posts/{id})."
                    arguments { id { type "number" description "Post id" default 1 } }
                    script <'
                        let body = workspace.requests.post.execute(id);
                        console.log(formatJson(body));
                        return body;
                    '>
                }

                postsummary {
                    description "C#: show a tiny summary of the first post using Newtonsoft.Json (requires package)."
                    script csharp <"
                        testFunction("Hello from C#");
                        // Ensure package installed: a2c package install newtonsoft.json
                        var raw = (string)workspace.requests.posts.execute();
                        var arr = Newtonsoft.Json.Linq.JArray.Parse(raw);
                        var first = arr.FirstOrDefault();
                        if (first == null) return "No posts";
                        Console.WriteLine($"#{first.Value<int>("id")}: {first.Value<string>("title")}");
                        return Newtonsoft.Json.JsonConvert.SerializeObject(first, Newtonsoft.Json.Formatting.Indented);
                    ">
                }

                cstest {
                    description "C#: test."
                    script csharp <"
                        testFunction("Hello from C#");
                    ">
                }

                jstest {
                    description "JavaScript: test."
                    script javascript <"
                        testFunction("Hello from JavaScript");
                    ">
                }
            }

            requests {
                posts {
                    endpoint "/posts"
                    method "GET"
                    headers { Accept "application/json" }
                }

                post {
                    endpoint "/posts/{{[arg]::id}}"
                    method "GET"
                    headers { Accept "application/json" }
                    arguments { id { type "number" description "Post id" } }
                }

                createpost {
                    endpoint "/posts"
                    method "POST"
                    headers { Content-Type "application/json" }
                    arguments {
                        title { type "string" description "Post title" default "hello" }
                        body { type "string" description "Post body" default "lorem ipsum" }
                        userId { type "number" description "User id" default 1 }
                    }
                    payload <'{ "title": "{{[arg]::title}}", "body": "{{[arg]::body}}", "userId": {{[arg]::userId}} }'>
                }
            }
        }
    }
}
