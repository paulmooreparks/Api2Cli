name: Auto Build and Version

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  auto-build:
    name: Auto Build and Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Calculate Version
      id: set_version
      shell: bash
      run: |
        # Extract current version from the project file
        CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' xk/xk.csproj)
        echo "Current version: $CURRENT_VERSION"

        # Extract major.minor and calculate build number
        BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*$//')
        MAJOR_MINOR=$(echo $BASE_VERSION | sed 's/\.[0-9]*$//')
        COMMIT_COUNT=$(git rev-list --count HEAD)
        NEW_VERSION="${MAJOR_MINOR}.${COMMIT_COUNT}"

        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Update the project file with the new version
        sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|" xk/xk.csproj

    - name: Commit and Push Version Update
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add xk/xk.csproj
        git commit -m "Auto-increment version to ${{ steps.set_version.outputs.version }} [skip ci]"
        git push

    - name: Build and Test
      shell: bash
      run: |
        dotnet restore XferKit.sln
        dotnet build XferKit.sln --configuration Release --no-restore -p:Version=${{ steps.set_version.outputs.version }}
        dotnet test XferKit.sln --configuration Release --no-build --verbosity normal

  cross-platform-builds:
    name: Build for All Platforms
    needs: auto-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Publish Application
      shell: bash
      run: |
        dotnet publish xk/xk.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish \
          -p:Version=${{ needs.auto-build.outputs.version }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.runtime }}-${{ needs.auto-build.outputs.version }}
        path: ./publish/

    # Installer creation and upload for each platform
    - name: Install WiX Toolset
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Download and install WiX Toolset
        Invoke-WebRequest -Uri "https://wixtoolset.org/releases/v3.11.2.4516/wix311-binaries.zip" -OutFile "wix311-binaries.zip"
        Expand-Archive -Path "wix311-binaries.zip" -DestinationPath "C:\WiX"
        $env:PATH += ";C:\WiX\bin"

        # Ensure the publish directory exists
        if (!(Test-Path -Path "./publish")) {
          throw "Publish directory does not exist."
        }

        # Use heat to harvest files
        & "C:\WiX\bin\heat.exe" dir ./publish -cg PublishedFiles -gg -sfrag -dr INSTALLFOLDER -out harvested.wxs

        # Create the Product.wxs file
        $wxsContent = '<?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
          <Package Name="XferKit" Language="1033" Version="${{ needs.auto-build.outputs.version }}" Manufacturer="Parks Computing" UpgradeCode="A1B2C3D4-E5F6-7890-ABCD-123456789012">
            <MajorUpgrade DowngradeErrorMessage="A newer version is already installed."/>
            <MediaTemplate EmbedCab="yes"/>
            <Feature Id="ProductFeature" Title="XferKit" Level="1">
              <ComponentGroupRef Id="PublishedFiles"/>
            </Feature>
          </Package>
        </Wix>'
        $wxsContent | Out-File -FilePath "Product.wxs" -Encoding UTF8

        # Build the MSI installer
        & "C:\WiX\bin\candle.exe" Product.wxs
        & "C:\WiX\bin\light.exe" Product.wixobj -out "./xk-${{ needs.auto-build.outputs.version }}-installer-win-x64.msi"

    - name: Upload Windows Installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-win-x64
        path: ./xk-${{ needs.auto-build.outputs.version }}-installer-win-x64.msi

    - name: Create Linux Debian Package
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p debian/DEBIAN debian/usr/local/bin
        cp -r publish/* debian/usr/local/bin/
        chmod +x debian/usr/local/bin/xk
        cat > debian/DEBIAN/control << EOF
        Package: xferkit
        Version: ${{ needs.auto-build.outputs.version }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Parks Computing <support@parkscomputing.com>
        Description: XferKit - API Management CLI Tool.
        EOF
        dpkg-deb --build debian "./xk-${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb"

    - name: Upload Linux Installer
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-linux-x64
        path: ./xk-${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb

    - name: Create macOS Package
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        pkgbuild --root ./publish --identifier com.parkscomputing.xferkit \
                 --version ${{ needs.auto-build.outputs.version }} \
                 "./xk-${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg"

    - name: Upload macOS Installer
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-osx-x64
        path: ./xk-${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg
  publish-release:
    name: Publish GitHub Release
    needs: cross-platform-builds
    runs-on: ubuntu-latest
    steps:
    - name: Download all installers
      uses: actions/download-artifact@v4
      with:
        path: release-assets
    - name: List release assets
      run: ls -lR release-assets
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.auto-build.outputs.version }}
        name: XferKit v${{ needs.auto-build.outputs.version }}
        prerelease: false
        generate_release_notes: true
        files: release-assets/*
