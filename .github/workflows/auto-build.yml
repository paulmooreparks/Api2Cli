name: Auto Build & Release

# Trigger only on merges/pushes to main
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reset_build_number:
        description: "Reset the build number (true/false)"
        required: false
        default: "false"

# Needs write access to push tags and create releases
permissions:
  contents: write

concurrency:
  group: build-version-${{ github.ref }}
  cancel-in-progress: false

jobs:
  auto-build:
    name: Compute Version & Pack
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    outputs:
      version: ${{ steps.compute-version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Compute per-series version
        id: compute-version
        shell: bash
        run: |
          set -euo pipefail
          # Read base version (major.minor.patch) from csproj
          BASE=$(grep -oPm1 '(?<=<Version>)[^<]+' a2c/a2c.csproj | tr -d '\r' | xargs)
          if [[ -z "${BASE:-}" ]]; then
            echo "Unable to find <Version> in a2c/a2c.csproj" >&2
            exit 1
          fi
          # Derive major.minor series
          BASE2=$(echo "$BASE" | awk -F. '{print $1"."$2}')
          PREFIX="v${BASE2}."

          # Optional manual reset via workflow_dispatch input
          RESET_INPUT="${{ github.event.inputs.reset_build_number || 'false' }}"

          # Find the highest existing tag for this series (vX.Y.N)
          # Ensure all tags are available
          git fetch --tags --force >/dev/null 2>&1 || true
          # List tags like vX.Y.N, extract N for this series, and pick the max
          LAST=$(git tag -l "v${BASE2}.*" | awk -F. -v s="v${BASE2}" '($1"."$2)==s && $3 ~ /^[0-9]+$/ {print $3}' | sort -n | tail -n1)
          if [[ -z "${LAST:-}" ]]; then LAST=0; fi
          if [[ "${RESET_INPUT,,}" == "true" ]]; then LAST=0; fi

          NEXT=$((LAST + 1))
          FULL="${BASE2}.${NEXT}"

          echo "Computed version for ${BASE2} = ${FULL} (prev: ${LAST})"
          echo "version=${FULL}" >> "$GITHUB_OUTPUT"

      - name: Tag release
        if: ${{ github.actor != 'nektos/act' }}
        run: |
          git tag v${{ steps.compute-version.outputs.version }}
          git push origin v${{ steps.compute-version.outputs.version }}

  cross-platform-builds:
    name: Build & Package All Platforms
    needs: auto-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            executable: a2c.exe
            icon_file: favicon.ico
            icon_copy_name: a2c.ico
          - os: ubuntu-latest
            runtime: linux-x64
            executable: a2c
            icon_file: favicon-96x96.png
            icon_copy_name: a2c.png
          - os: macos-latest
            runtime: osx-x64
            executable: a2c
            icon_file: apple-icon.png
            icon_copy_name: a2c.png

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Verify icon files exist
        shell: bash
        run: |
          echo "Checking for icon files..."
          if [ -f "logo/icons/${{ matrix.icon_file }}" ]; then
            echo "✅ Icon file found: logo/icons/${{ matrix.icon_file }}"
            ls -la "logo/icons/${{ matrix.icon_file }}"
          else
            echo "❌ Icon file not found: logo/icons/${{ matrix.icon_file }}"
            echo "Available icons:"
            ls -la logo/icons/ || echo "logo/icons directory not found"
            exit 1
          fi

      - name: Publish for ${{ matrix.os }}
        shell: bash
        run: |
          dotnet publish a2c/a2c.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            -p:PublishSingleFile=true \
            -p:PublishReadyToRun=${{ matrix.os == 'windows-latest' && 'true' || 'false' }} \
            -p:PublishTrimmed=false \
            -o publish \
            -p:Version=${{ needs.auto-build.outputs.version }} \
            -p:AssemblyVersion=${{ needs.auto-build.outputs.version }}.0 \
            -p:FileVersion=${{ needs.auto-build.outputs.version }}.0 \
            -p:InformationalVersion=${{ needs.auto-build.outputs.version }}

      - name: Copy platform-specific icon
        shell: bash
        run: |
          echo "Copying icon for ${{ matrix.os }}..."
          cp "logo/icons/${{ matrix.icon_file }}" "publish/${{ matrix.icon_copy_name }}"
          echo "Icon copied successfully"
          ls -la "publish/${{ matrix.icon_copy_name }}"

      - name: Verify executable and icon
        shell: bash
        run: |
          echo "Build verification for ${{ matrix.os }}:"
          echo "Executable: publish/${{ matrix.executable }}"
          ls -la "publish/${{ matrix.executable }}"
          echo "Icon: publish/${{ matrix.icon_copy_name }}"
          ls -la "publish/${{ matrix.icon_copy_name }}"
          echo "✅ Build verification complete"

      # Windows installer (Inno Setup)
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          # Download and install Inno Setup silently
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" `
                        -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART" `
                        -Wait

      - name: Create Inno Setup Script
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $scriptContent = @"
          [Setup]
          AppName=Api2Cli
          AppVersion=${{ needs.auto-build.outputs.version }}
          DefaultDirName={pf}\Api2Cli
          DefaultGroupName=Api2Cli
          OutputBaseFilename=Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64
          Compression=lzma
          SolidCompression=yes
          ChangesEnvironment=yes
          SetupIconFile=publish\a2c.ico

          [Files]
          Source: "publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs

          [Icons]
          Name: "{group}\Api2Cli"; Filename: "{app}\a2c.exe"; IconFilename: "{app}\a2c.ico"
          Name: "{group}\Uninstall Api2Cli"; Filename: "{uninstallexe}"
          Name: "{commondesktop}\Api2Cli"; Filename: "{app}\a2c.exe"; IconFilename: "{app}\a2c.ico"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; Check: NeedsAddPath('{app}')

          [Code]
          function NeedsAddPath(Param: string): boolean;
          var
            OrigPath: string;
          begin
            if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
              'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
              'Path', OrigPath)
            then begin
              Result := True;
              exit;
            end;
            Result := Pos(';' + UpperCase(Param) + ';', ';' + UpperCase(OrigPath) + ';') = 0;
          end;
          "@
          $scriptContent | Out-File -FilePath "installer.iss" -Encoding UTF8

      - name: Build Installer with Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $innoSetup = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $script    = "installer.iss"
          if (-Not (Test-Path $script)) {
            Write-Error "Installer script not found: $script"
            exit 1
          }
          # Compile into the 'Output' folder
          & $innoSetup $script

      # Linux installer (.deb)
      - name: Package Installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p ./Output
          mkdir -p debian/DEBIAN debian/usr/local/bin debian/usr/share/pixmaps debian/usr/share/applications

          # Copy executable and icon
          cp -r publish/* debian/usr/local/bin/
          chmod +x debian/usr/local/bin/a2c
          cp publish/a2c.png debian/usr/share/pixmaps/

          # Create desktop entry
          cat > debian/usr/share/applications/api2cli.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Api2Cli
          Comment=API Management CLI Tool
          Exec=a2c
          Icon=a2c
          Terminal=true
          Categories=Development;Network;
          EOF

          # Create package control file
          cat > debian/DEBIAN/control << EOF
          Package: api2cli
          Version: ${{ needs.auto-build.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Parks Computing <paul@parkscomputing.com>
          Description: Api2Cli - API Management CLI Tool
           A powerful command-line interface for HTTP API management, testing, and automation.
           Provides workspace-based API organization with JavaScript scripting support.
          EOF

          # Build the package
          dpkg-deb --build debian "./Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb"

      # macOS installer (.pkg)
      - name: Package Installer (macOS)
        if: matrix.os == 'macos-latest' && github.actor != 'nektos/act'
        shell: bash
        run: |
          # Create directory structure for macOS package
          mkdir -p macos-pkg/usr/local/bin
          mkdir -p macos-pkg/usr/local/share/pixmaps

          # Copy files
          cp publish/a2c macos-pkg/usr/local/bin/
          cp publish/a2c.png macos-pkg/usr/local/share/pixmaps/
          chmod +x macos-pkg/usr/local/bin/a2c

          # Build the package
          pkgbuild --root macos-pkg \
                   --identifier com.parkscomputing.api2cli \
                   --version ${{ needs.auto-build.outputs.version }} \
                   --install-location / \
                   Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg

      - name: Upload Windows Installer Artifact
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-win-x64
          path: Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe

      - name: Upload Linux Installer Artifact
        if: matrix.os == 'ubuntu-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-linux-x64
          path: Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb

      - name: Upload macOS Installer Artifact
        if: matrix.os == 'macos-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-osx-x64
          path: Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg

      # Upload standalone executables with icons as additional artifacts
      - name: Create Standalone Archive
        shell: bash
        run: |
          mkdir -p standalone-${{ matrix.runtime }}
          cp publish/${{ matrix.executable }} standalone-${{ matrix.runtime }}/
          cp publish/${{ matrix.icon_copy_name }} standalone-${{ matrix.runtime }}/

      - name: Upload Standalone Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: standalone-${{ matrix.runtime }}
          path: standalone-${{ matrix.runtime }}/

  publish-release:
    name: Publish GitHub Release
    needs: [auto-build, cross-platform-builds]
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find release-assets -type f -exec ls -la {} \;

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.auto-build.outputs.version }}
          release_name: Api2Cli v${{ needs.auto-build.outputs.version }}
          body: |
            ## 🚀 Api2Cli v${{ needs.auto-build.outputs.version }}

            ### 📦 Installation Options

            #### Platform-Specific Installers (Recommended)
            - **Windows**: Download and run the `.exe` installer
            - **Linux**: Install the `.deb` package with `sudo dpkg -i filename.deb`
            - **macOS**: Install the `.pkg` package

            #### Standalone Executables
            - Download the appropriate standalone build for your platform
            - Extract and run directly (no installation required)

          draft: false
          prerelease: true

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/installer-win-x64/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe
          asset_name: Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/installer-linux-x64/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb
          asset_name: Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb
          asset_content_type: application/octet-stream

      - name: Upload macOS installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/installer-osx-x64/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg
          asset_name: Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg
          asset_content_type: application/octet-stream

      # Upload standalone builds
      - name: Upload Windows Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/standalone-win-x64/a2c.exe
          asset_name: a2c-v${{ needs.auto-build.outputs.version }}-standalone-win-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/standalone-linux-x64/a2c
          asset_name: a2c-v${{ needs.auto-build.outputs.version }}-standalone-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload macOS Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/standalone-osx-x64/a2c
          asset_name: a2c-v${{ needs.auto-build.outputs.version }}-standalone-osx-x64
          asset_content_type: application/octet-stream
