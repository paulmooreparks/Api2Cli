name: Auto Build & Release

# Trigger only on merges/pushes to main
on:
  push:
    branches:
      - main

# Needs write access to push tags and create releases
permissions:
  contents: write

jobs:
  auto-build:
    name: Compute Version & Pack
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      version: ${{ steps.read-version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Read version from csproj
        id: read-version
        run: |
          # grab the full Version (e.g. "0.4.0")
          base=$(grep -oPm1 "(?<=<Version>)[^<]+" xk/xk.csproj)
          # remove the patch (".0") to get "0.4"
          base2=${base%.*}
          # use the GitHub run number as your build counter
          build=${GITHUB_RUN_NUMBER}
          full="$base2.$build"
          echo "Computed version = $full"
          # expose it to later steps
          echo "version=$full" >> $GITHUB_OUTPUT

#      - name: Build & Pack .NET CLI
#        run: |
#          dotnet pack xk/xk.csproj \
#            --configuration Release \
#            /p:Version=${{ steps.read-version.outputs.version }} \
#            /p:PackageVersion=${{ steps.read-version.outputs.version }}

      - name: Tag release
        if: ${{ github.actor != 'nektos/act' }}
        run: |
          git tag v${{ steps.read-version.outputs.version }}
          git push origin v${{ steps.read-version.outputs.version }}

  cross-platform-builds:
    name: Build & Package All Platforms
    needs: auto-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Publish for ${{ matrix.os }}
        shell: bash
        run: |
          dotnet publish xk/xk.csproj \
            --configuration Release \
            --runtime ${{ matrix.os == 'windows-latest' && 'win-x64' || matrix.os == 'ubuntu-latest' && 'linux-x64' || 'osx-x64' }} \
            -o publish

      # Windows installer (Inno Setup)
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          # Download and install Inno Setup silently
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" `
                        -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART" `
                        -Wait

      - name: Create Inno Setup Script
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $scriptContent = @"
          [Setup]
          AppName=XferKit
          AppVersion=${{ needs.auto-build.outputs.version }}
          DefaultDirName={pf}\XferKit
          DefaultGroupName=XferKit
          OutputBaseFilename=XferKit-installer-win-x64
          Compression=lzma
          SolidCompression=yes

          [Files]
          Source: "./publish/*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs

          [Icons]
          Name: "{group}\XferKit"; Filename: "{app}\xk.exe"
          Name: "{group}\Uninstall XferKit"; Filename: "{uninstallexe}"
          "@
          $scriptContent | Out-File -FilePath "installer.iss" -Encoding UTF8

      - name: Build Installer with Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $innoSetup = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $script    = "installer.iss"
          if (-Not (Test-Path $script)) {
            Write-Error "Installer script not found: $script"
            exit 1
          }
          # Compile into the 'publish' folder
          & $innoSetup $script

      # Linux installer (.deb)
      - name: Package Installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p ./Output
          mkdir -p debian/DEBIAN debian/usr/local/bin
          cp -r publish/* debian/usr/local/bin/
          chmod +x debian/usr/local/bin/xk
          cat > debian/DEBIAN/control << EOF
          Package: xferkit
          Version: ${{ needs.auto-build.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Parks Computing <paul@parkscomputing.com>
          Description: XferKit - API Management CLI Tool.
          EOF
          dpkg-deb --build debian "./Output/XferKit-installer-linux-x64.deb"

      # macOS installer (.pkg)
      - name: Package Installer (macOS)
        if: matrix.os == 'macos-latest' && github.actor != 'nektos/act'
        shell: bash
        run: |
          pkgbuild --root publish \
                   --identifier com.yourorg.xferkit \
                   --install-location /usr/local \
                   XferKit-installer-osx-x64.pkg

      - name: Upload Installer Artifact
        if: github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os == 'windows-latest' && 'win-x64' || matrix.os == 'ubuntu-latest' && 'linux-x64' || 'osx-x64' }}
          path: |
            ${{ matrix.os == 'windows-latest' && 'Output/XferKit-installer-win-x64.exe' || matrix.os == 'ubuntu-latest' && 'Output/XferKit-installer-linux-x64.deb' || 'XferKit-installer-osx-x64.pkg' }}
          flatten: true

  publish-release:
    name: Publish GitHub Release
    needs: [auto-build, cross-platform-builds]
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all installers
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.auto-build.outputs.version }}
          release_name: XferKit v${{ needs.auto-build.outputs.version }}
          body: |
            ## Changelog
            Auto-generated release for version ${{ needs.auto-build.outputs.version }}
          draft: false
          prerelease: true

      - name: Upload macOS installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/XferKit-installer-osx-x64.pkg
          asset_name: XferKit-installer-osx-x64.pkg
          asset_content_type: application/octet-stream

      - name: Upload Linux installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/XferKit-installer-linux-x64.deb
          asset_name: XferKit-installer-linux-x64.deb
          asset_content_type: application/octet-stream
  
      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/XferKit-installer-win-x64.exe
          asset_name: XferKit-installer-win-x64.exe
          asset_content_type: application/octet-stream
