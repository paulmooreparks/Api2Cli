name: Auto Build & Release

# Trigger only on merges/pushes to main
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reset_build_number:
        description: "Reset the build number (true/false)"
        required: false
        default: "false"

# Needs write access to push tags and create releases
permissions:
  contents: write

jobs:
  auto-build:
    name: Compute Version & Pack
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      version: ${{ steps.read-version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Read version from csproj
        id: read-version
        run: |
          # grab the full Version (e.g. "0.4.0")
          base=$(grep -oPm1 "(?<=<Version>)[^<]+" a2c/a2c.csproj)
          # remove the patch (".0") to get "0.4"
          base2=${base%.*}

          # Check if the build number should be reset
          if [[ "${{ github.event.inputs.reset_build_number }}" == "true" ]]; then
            build=1
          else
            # use the GitHub run number as your build counter
            build=${GITHUB_RUN_NUMBER}
          fi
          full="$base2.$build"
          echo "Computed version = $full"
          # expose it to later steps
          echo "version=$full" >> $GITHUB_OUTPUT

      - name: Tag release
        if: ${{ github.actor != 'nektos/act' }}
        run: |
          git tag v${{ steps.read-version.outputs.version }}
          git push origin v${{ steps.read-version.outputs.version }}

  cross-platform-builds:
    name: Build & Package All Platforms
    needs: auto-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Publish for ${{ matrix.os }}
        shell: bash
        run: |
          dotnet publish a2c/a2c.csproj \
            --configuration Release \
            --runtime ${{ matrix.os == 'windows-latest' && 'win-x64' || matrix.os == 'ubuntu-latest' && 'linux-x64' || 'osx-x64' }} \
            -o publish \
            -p:Version=${{ needs.auto-build.outputs.version }}

      # Windows installer (Inno Setup)
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          # Download and install Inno Setup silently
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" `
                        -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART" `
                        -Wait

      - name: Create Inno Setup Script
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $scriptContent = @"
          [Setup]
          AppName=Api2Cli
          AppVersion=${{ needs.auto-build.outputs.version }}
          DefaultDirName={pf}\Api2Cli
          DefaultGroupName=Api2Cli
          OutputBaseFilename=Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64
          Compression=lzma
          SolidCompression=yes
          ChangesEnvironment=yes

          [Files]
          Source: "./publish/*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs

          [Icons]
          Name: "{group}\Api2Cli"; Filename: "{app}\a2c.exe"
          Name: "{group}\Uninstall Api2Cli"; Filename: "{uninstallexe}"

          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; Check: NeedsAddPath('{app}')

          [Code]
          function NeedsAddPath(Param: string): boolean;
          var
            OrigPath: string;
          begin
            if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
              'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
              'Path', OrigPath)
            then begin
              Result := True;
              exit;
            end;
            Result := Pos(';' + UpperCase(Param) + ';', ';' + UpperCase(OrigPath) + ';') = 0;
          end;
          "@
          $scriptContent | Out-File -FilePath "installer.iss" -Encoding UTF8

      - name: Build Installer with Inno Setup
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        shell: pwsh
        run: |
          $innoSetup = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $script    = "installer.iss"
          if (-Not (Test-Path $script)) {
            Write-Error "Installer script not found: $script"
            exit 1
          }
          # Compile into the 'publish' folder
          & $innoSetup $script

      # Linux installer (.deb)
      - name: Package Installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p ./Output
          mkdir -p debian/DEBIAN debian/usr/local/bin
          cp -r publish/* debian/usr/local/bin/
          chmod +x debian/usr/local/bin/xk
          cat > debian/DEBIAN/control << EOF
          Package:\ api2cli
          Version: ${{ needs.auto-build.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Parks Computing <paul@parkscomputing.com>
          Description:\ Api2Cli\ - API Management CLI Tool.
          EOF
          dpkg-deb --build debian "./Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb"

      # macOS installer (.pkg)
      - name: Package Installer (macOS)
        if: matrix.os == 'macos-latest' && github.actor != 'nektos/act'
        shell: bash
        run: |
          pkgbuild --root publish \
                   --identifier\ com.yourorg.api2cli \
                   --install-location /usr/local \
                   Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg

      - name: Upload Windows Installer Artifact
        if: matrix.os == 'windows-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-win-x64
          path: Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe

      - name: Upload Linux Installer Artifact
        if: matrix.os == 'ubuntu-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-linux-x64
          path: Output/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb

      - name: Upload macOS Installer Artifact
        if: matrix.os == 'macos-latest' && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v4
        with:
          name: installer-osx-x64
          path: Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg

  publish-release:
    name: Publish GitHub Release
    needs: [auto-build, cross-platform-builds]
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all installers
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.auto-build.outputs.version }}
          release_name:\ Api2Cli v${{ needs.auto-build.outputs.version }}
          body: |
            ## Changelog
            Auto-generated release for version ${{ needs.auto-build.outputs.version }}
          draft: false
          prerelease: true

      - name: Upload macOS installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path:\ release-assets/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg
          asset_name:\ Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-osx-x64.pkg
          asset_content_type: application/octet-stream

      - name: Upload Linux installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path:\ release-assets/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb
          asset_name:\ Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-linux-x64.deb
          asset_content_type: application/octet-stream

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path:\ release-assets/Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe
          asset_name:\ Api2Cli-v${{ needs.auto-build.outputs.version }}-installer-win-x64.exe
          asset_content_type: application/octet-stream
