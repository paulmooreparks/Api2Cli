name: Auto Version and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  version-and-build:
    name: Version, Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for versioning
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Calculate Version
      id: version
      shell: bash
      run: |
        # Get the current version from the project file
        CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' xk/xk.csproj)
        echo "Current version: $CURRENT_VERSION"

        # Extract major.minor from current version (remove -prerelease suffix)
        BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-prerelease//' | sed 's/-.*$//')
        MAJOR_MINOR=$(echo $BASE_VERSION | sed 's/\.[0-9]*$//')

        # Count commits on main branch since last tag (or beginning if no tags)
        COMMIT_COUNT=$(git rev-list --count HEAD)

        # For main branch, create release version; for PR, create prerelease
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          NEW_VERSION="${MAJOR_MINOR}.${COMMIT_COUNT}"
          BUILD_NUMBER="${COMMIT_COUNT}"
        else
          NEW_VERSION="${MAJOR_MINOR}.${COMMIT_COUNT}-prerelease"
          BUILD_NUMBER="${COMMIT_COUNT}"
        fi

        echo "New version: $NEW_VERSION"
        echo "Build number: $BUILD_NUMBER"

        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

        # Update the project file with new version
        sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|" xk/xk.csproj

        # Display the change
        echo "Updated project file:"
        grep -A2 -B2 "<Version>" xk/xk.csproj

    - name: Commit version change (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add xk/xk.csproj
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-increment version to ${{ steps.version.outputs.version }} [skip ci]"
          git push origin HEAD:main
        fi

    - name: Create version tag (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        TAG_NAME="v${{ steps.version.outputs.version }}"

        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, skipping tag creation"
        else
          echo "Creating tag $TAG_NAME"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
        fi

    - name: Restore dependencies
      shell: bash
      run: dotnet restore XferKit.sln

    - name: Build solution
      shell: bash
      run: dotnet build XferKit.sln --configuration Release --no-restore -p:Version=${{ steps.version.outputs.version }}

    - name: Run tests (if any)
      shell: bash
      run: dotnet test XferKit.sln --configuration Release --no-build --verbosity normal || echo "No tests found"

    - name: Publish artifacts
      shell: bash
      run: dotnet publish xk/xk.csproj --configuration Release --output ./publish --no-build -p:Version=${{ steps.version.outputs.version }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xk-build-${{ steps.version.outputs.version }}
        path: ./publish
        retention-days: 30

    - name: Show Release Instructions
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        echo "âœ… Version ${{ steps.version.outputs.version }} created successfully!"
        echo ""
        echo "ðŸš€ To create a release:"
        echo "1. Go to: https://github.com/${{ github.repository }}/actions/workflows/release.yml"
        echo "2. Click 'Run workflow'"
        echo "3. Leave version empty to use auto-generated version: ${{ steps.version.outputs.version }}"
        echo "4. Choose prerelease setting and click 'Run workflow'"

  # Cross-platform builds for main branch only
  cross-platform-build:
    name: Build ${{ matrix.os }}
    needs: version-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      shell: bash
      run: dotnet restore XferKit.sln

    - name: Build solution
      shell: bash
      run: dotnet build XferKit.sln --configuration Release --no-restore -p:Version=${{ needs.version-and-build.outputs.version }}

    - name: Publish for ${{ matrix.os }}
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          dotnet publish xk/xk.csproj --configuration Release --runtime win-x64 --self-contained true --output ./publish /p:Version=${{ steps.version.outputs.version }}
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          dotnet publish xk/xk.csproj --configuration Release --runtime linux-x64 --self-contained true --output ./publish /p:Version=${{ steps.version.outputs.version }}
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          dotnet publish xk/xk.csproj --configuration Release --runtime osx-x64 --self-contained true --output ./publish /p:Version=${{ steps.version.outputs.version }}
        fi

    - name: Upload platform artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xk-${{ matrix.os }}-${{ needs.version-and-build.outputs.version }}
        path: ./publish/${{ matrix.os }}
        retention-days: 30

    - name: Create Windows Installer
      if: matrix.os == 'windows-latest'
      run: |
        # Install WiX Toolset
        dotnet tool install --global wix --version 5.0.1

        # Create installer project directory
        mkdir installer
        cd installer

        # Create WiX source file that includes ALL published files
        @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
          <Package Name="XferKit" Language="1033" Version="${{ steps.version.outputs.version }}"
                   Manufacturer="Parks Computing" UpgradeCode="12345678-1234-1234-1234-123456789012">
            <MajorUpgrade DowngradeErrorMessage="A newer version is already installed." />
            <MediaTemplate EmbedCab="yes" />

            <Feature Id="ProductFeature" Title="XferKit" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
            </Feature>
          </Package>

          <Fragment>
            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="XferKit" />
              </Directory>
              <Directory Id="ProgramMenuFolder">
                <Directory Id="ApplicationProgramsFolder" Name="XferKit" />
              </Directory>
            </Directory>
          </Fragment>

          <Fragment>
            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <!-- Main executable -->
              <Component Id="MainExecutable" Guid="12345678-1234-1234-1234-123456789013">
                <File Id="XkExe" Source="../publish/xk.exe" KeyPath="yes" />
                <Environment Id="PATH" Name="PATH" Value="[INSTALLFOLDER]" Permanent="no" Part="last" Action="set" System="yes" />
              </Component>

              <!-- All DLL dependencies -->
              <Component Id="Dependencies" Guid="12345678-1234-1234-1234-123456789014">
                <File Id="XkDll" Source="../publish/xk.dll" />
                <!-- Add other DLLs as needed -->
              </Component>

              <!-- Runtime config files -->
              <Component Id="RuntimeConfig" Guid="12345678-1234-1234-1234-123456789015">
                <File Id="RuntimeConfigJson" Source="../publish/xk.runtimeconfig.json" />
                <File Id="DepsJson" Source="../publish/xk.deps.json" />
              </Component>
            </ComponentGroup>
          </Fragment>
        </Wix>
        "@ | Out-File -FilePath "XferKit.wxs" -Encoding UTF8

        # Build the installer with all files
        wix build XferKit.wxs -arch x64 -out "../xk-${{ steps.version.outputs.version }}-windows-x64.msi"

    - name: Create Windows Installer (Alternative with Heat)
      if: matrix.os == 'windows-latest'
      run: |
        # Install WiX Toolset
        dotnet tool install --global wix --version 5.0.1

        # Create installer project directory
        mkdir installer
        cd installer

        # Use Heat to harvest all files from publish directory
        wix extension add WixToolset.Heat.wixext
        heat dir ../publish -cg PublishedFiles -gg -scom -sreg -sfrag -srd -dr INSTALLFOLDER -out harvested.wxs

        # Create main installer source
        @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
          <Package Name="XferKit" Language="1033" Version="${{ steps.version.outputs.version }}"
                   Manufacturer="Parks Computing" UpgradeCode="12345678-1234-1234-1234-123456789012">
            <MajorUpgrade DowngradeErrorMessage="A newer version is already installed." />
            <MediaTemplate EmbedCab="yes" />

            <Feature Id="ProductFeature" Title="XferKit" Level="1">
              <ComponentGroupRef Id="PublishedFiles" />
            </Feature>
          </Package>

          <Fragment>
            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="XferKit" />
              </Directory>
              <Directory Id="ProgramMenuFolder">
                <Directory Id="ApplicationProgramsFolder" Name="XferKit" />
              </Directory>
            </Directory>
          </Fragment>

          <Fragment>
            <ComponentGroup Id="PublishedFiles" Directory="INSTALLFOLDER">
              <!-- All files harvested by Heat -->
              <Component Id="HarvestedFiles" Guid="12345678-1234-1234-1234-123456789016">
                <File Id="HarvestedFilesDir" Source="harvested.wxs" KeyPath="yes" />
              </Component>
            </ComponentGroup>
          </Fragment>
        </Wix>
        "@ | Out-File -FilePath "XferKitMain.wxs" -Encoding UTF8

        # Build the installer with harvested files
        wix build XferKitMain.wxs -arch x64 -out "../xk-${{ steps.version.outputs.version }}-windows-x64-harvested.msi"

    - name: Debug - List Published Files
      if: matrix.os == 'windows-latest'
      run: |
        echo "Files in publish directory:"
        ls -la ./publish/
        echo "Total file count: $(ls -1 ./publish/ | wc -l)"
