name: Create Release with Installers

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (leave empty to use auto-generated version from latest build)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  get-version:
    name: Determine Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Get Version
      id: version
      shell: bash  # Add this line
      run: |
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
          # Use manually provided version
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        else
          # Get version from project file (latest auto-generated)
          VERSION=$(grep -oP '<Version>\K[^<]+' xk/xk.csproj)
          # Remove -prerelease suffix for releases
          VERSION=$(echo $VERSION | sed 's/-prerelease//')
          echo "Using auto-generated version: $VERSION"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"

  build-release:
    name: Build ${{ matrix.target }}
    needs: get-version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows-x64
            runtime: win-x64
            extension: .exe
            archive_type: zip
            installer_type: msi
          - os: ubuntu-latest
            target: linux-x64
            runtime: linux-x64
            extension: ''
            archive_type: tar.gz
            installer_type: deb
          - os: macos-latest
            target: macos-x64
            runtime: osx-x64
            extension: ''
            archive_type: tar.gz
            installer_type: pkg

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      shell: bash
      run: dotnet restore XferKit.sln

    - name: Build solution
      shell: bash
      run: dotnet build XferKit.sln --configuration Release --no-restore -p:Version=${{ needs.get-version.outputs.version }}

    # Create portable archives (ZIP/TAR.GZ)
    - name: Publish portable executable
      shell: bash
      run: |
        dotnet publish xk/xk.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./release/${{ matrix.target }} \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:Version=${{ needs.get-version.outputs.version }}

    - name: Create portable archive (Windows)
      if: matrix.archive_type == 'zip'
      shell: pwsh
      run: |
        cd ./release/${{ matrix.target }}
        Compress-Archive -Path * -DestinationPath ../../xk-${{ matrix.target }}.zip

    - name: Create portable archive (Linux/macOS)
      if: matrix.archive_type == 'tar.gz'
      shell: bash
      run: |
        cd ./release/${{ matrix.target }}
        tar -czf ../../xk-${{ matrix.target }}.tar.gz *

    # Create platform-specific installers
    - name: Publish for installer
      shell: bash
      run: |
        dotnet publish xk/xk.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained false \
          --output ./installer-build \
          -p:Version=${{ needs.get-version.outputs.version }}

    # Windows MSI Installer
    - name: Create Windows MSI Installer
      if: matrix.installer_type == 'msi'
      shell: bash
      run: |
        # Install WiX Toolset
        dotnet tool install --global wix --version 4.0.4

        # Create installer directory structure
        mkdir -p installer/bin
        cp -r ./installer-build/* installer/bin/

        # Find the correct executable name
        if [ -f "installer/bin/xk.exe" ]; then
          EXE_NAME="xk.exe"
        else
          EXE_NAME="xk"
        fi
        echo "Using executable: $EXE_NAME"

        # Create WiX source file
        cat > installer.wxs << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
          <Package Name="XferKit"
                   Language="1033"
                   Version="${{ needs.get-version.outputs.version }}"
                   Manufacturer="Parks Computing"
                   UpgradeCode="12345678-1234-1234-1234-123456789012">

            <MajorUpgrade DowngradeErrorMessage="A newer version of XferKit is already installed." />

            <MediaTemplate EmbedCab="yes" />

            <Feature Id="ProductFeature" Title="XferKit" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
            </Feature>

            <StandardDirectory Id="ProgramFilesFolder">
              <Directory Id="INSTALLFOLDER" Name="XferKit">
                <Component Id="XferKitExecutable">
                  <File Id="xk_exe" Source="installer/bin/$EXE_NAME" />
                  <Environment Id="PATH" Name="PATH" Value="[INSTALLFOLDER]" Permanent="no" Part="last" Action="set" System="yes" />
                </Component>
              </Directory>
            </StandardDirectory>

            <ComponentGroup Id="ProductComponents">
              <ComponentRef Id="XferKitExecutable" />
            </ComponentGroup>

          </Package>
        </Wix>
        EOF

        # Build the MSI
        wix build installer.wxs -o xk-${{ needs.get-version.outputs.version }}-windows-x64.msi

    # Linux DEB Package
    - name: Create Linux DEB Package
      if: matrix.installer_type == 'deb'
      shell: bash
      run: |
        # Create package directory structure
        mkdir -p package/DEBIAN
        mkdir -p package/usr/local/bin
        mkdir -p package/usr/share/doc/xferkit

        # Find and copy binary
        if [ -f "./installer-build/xk" ]; then
          cp ./installer-build/xk package/usr/local/bin/
        elif [ -f "./installer-build/xk.exe" ]; then
          cp ./installer-build/xk.exe package/usr/local/bin/xk
        else
          echo "Error: Could not find xk executable"
          ls -la ./installer-build/
          exit 1
        fi
        chmod +x package/usr/local/bin/xk

        # Create control file
        cat > package/DEBIAN/control << EOF
        Package: xferkit
        Version: ${{ needs.get-version.outputs.version }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Parks Computing <contact@parkscomputing.com>
        Description: HTTP API management CLI tool
         XferKit is a powerful command-line tool for managing HTTP APIs,
         workspaces, and executing JavaScript automation scripts.
        EOF

        # Create copyright file
        cat > package/usr/share/doc/xferkit/copyright << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: XferKit
        Source: https://github.com/${{ github.repository }}

        Files: *
        Copyright: $(date +%Y) Parks Computing
        License: MIT
        EOF

        # Build the DEB package
        dpkg-deb --build package xk-${{ needs.get-version.outputs.version }}-linux-x64.deb

    # macOS PKG Installer
    - name: Create macOS PKG Installer
      if: matrix.installer_type == 'pkg'
      shell: bash
      run: |
        # Create package directory structure
        mkdir -p package-root/usr/local/bin

        # Find and copy binary
        if [ -f "./installer-build/xk" ]; then
          cp ./installer-build/xk package-root/usr/local/bin/
        elif [ -f "./installer-build/xk.exe" ]; then
          cp ./installer-build/xk.exe package-root/usr/local/bin/xk
        else
          echo "Error: Could not find xk executable"
          ls -la ./installer-build/
          exit 1
        fi
        chmod +x package-root/usr/local/bin/xk

        # Create component package
        pkgbuild --root package-root \
                 --identifier com.parkscomputing.xferkit \
                 --version ${{ needs.get-version.outputs.version }} \
                 --install-location / \
                 xk-component.pkg

        # Create distribution XML
        cat > distribution.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
          <title>XferKit ${{ needs.get-version.outputs.version }}</title>
          <organization>com.parkscomputing</organization>
          <domains enable_localSystem="true"/>
          <options customize="never" require-scripts="false"/>
          <choices-outline>
            <line choice="default">
              <line choice="com.parkscomputing.xferkit"/>
            </line>
          </choices-outline>
          <choice id="default"/>
          <choice id="com.parkscomputing.xferkit" visible="false">
            <pkg-ref id="com.parkscomputing.xferkit"/>
          </choice>
          <pkg-ref id="com.parkscomputing.xferkit" version="${{ needs.get-version.outputs.version }}" onConclusion="none">xk-component.pkg</pkg-ref>
        </installer-gui-script>
        EOF

        # Create final installer package
        productbuild --distribution distribution.xml \
                     --package-path . \
                     xk-${{ needs.get-version.outputs.version }}-macos-x64.pkg

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: |
          ./xk-${{ matrix.target }}.${{ matrix.archive_type }}
          *.msi
          *.deb
          *.pkg

  create-release:
    name: Create GitHub Release
    needs: [get-version, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Organize artifacts
      shell: bash
      run: |
        # Move all files to a single directory for release
        mkdir -p ./release-files
        find ./artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.msi" -o -name "*.deb" -o -name "*.pkg" \) -exec cp {} ./release-files/ \;
        ls -la ./release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: XferKit v${{ needs.get-version.outputs.version }}
        body: |
          ## XferKit v${{ needs.get-version.outputs.version }}

          ### Portable Downloads (No Installation Required)
          - **Windows**: `xk-windows-x64.zip` - Extract and run
          - **Linux**: `xk-linux-x64.tar.gz` - Extract and run
          - **macOS**: `xk-macos-x64.tar.gz` - Extract and run

          ### Installers (Automatic PATH Setup)
          - **Windows**: `xk-${{ needs.get-version.outputs.version }}-windows-x64.msi` - Windows Installer
          - **Linux**: `xk-${{ needs.get-version.outputs.version }}-linux-x64.deb` - Debian Package
          - **macOS**: `xk-${{ needs.get-version.outputs.version }}-macos-x64.pkg` - macOS Package

          ### Installation Instructions

          #### Portable (Manual)
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Add the extracted folder to your PATH
          4. Run `xk --help` to verify installation

          #### Installers (Automatic)
          - **Windows**: Run the MSI installer
          - **Linux**: `sudo dpkg -i xk-${{ needs.get-version.outputs.version }}-linux-x64.deb`
          - **macOS**: Run the PKG installer

          ### Changes
          - Built from commit ${{ github.sha }}

          ### Verification
          After installation, verify with: `xk --version`
        files: ./release-files/*
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
