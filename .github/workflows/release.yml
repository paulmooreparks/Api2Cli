name: Create and Publish Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Mark as a pre-release'
        required: true
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  create-installers:
    name: Create Installers for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set Version from Project File (if not provided)
      id: set_version
      shell: bash
      run: |
        VERSION=$(grep -E '<Version>[^<]+' xk/xk.csproj | sed -E 's/<Version>([^<]+).*/\1/' | xargs)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "::set-output name=VERSION::$VERSION"

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ matrix.runtime }}-${{ steps.set_version.outputs.VERSION }}
        path: ./publish

    - name: Create Windows Installer
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        dotnet tool install --global wix --version 5.0.1
        $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
        wix heat dir ./publish -cg PublishedFiles -gg -sfrag -dr INSTALLFOLDER -out harvested.wxs

        $wxsContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Wix xmlns=\"http://wixtoolset.org/schemas/v4/wxs\">\n  <Package Name=\"XferKit\" Language=\"1033\" Version=\"${{ steps.set_version.outputs.VERSION }}\" Manufacturer=\"Parks Computing\" UpgradeCode=\"A1B2C3D4-E5F6-7890-ABCD-123456789012\">\n    <MajorUpgrade DowngradeErrorMessage=\"A newer version is already installed.\"/>\n    <MediaTemplate EmbedCab=\"yes\"/>\n    <Feature Id=\"ProductFeature\" Title=\"XferKit\" Level=\"1\">\n      <ComponentGroupRef Id=\"PublishedFiles\"/>\n    </Feature>\n  </Package>\n</Wix>"
        $wxsContent | Out-File -FilePath "Product.wxs" -Encoding UTF8
        wix build Product.wxs harvested.wxs -arch x64 -out "./xk-${{ steps.set_version.outputs.VERSION }}-installer-win-x64.msi"

    - name: Upload Windows Installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-win-x64
        path: ./xk-${{ steps.set_version.outputs.VERSION }}-installer-win-x64.msi

    - name: Create Linux Debian Package
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p debian/DEBIAN debian/usr/local/bin
        cp -r publish/* debian/usr/local/bin/
        chmod +x debian/usr/local/bin/xk
        cat > debian/DEBIAN/control << EOF
        Package: xferkit
        Version: ${{ steps.set_version.outputs.VERSION }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Parks Computing <support@parkscomputing.com>
        Description: XferKit - API Management CLI Tool.
        EOF
        dpkg-deb --build debian "./xk-${{ steps.set_version.outputs.VERSION }}-installer-linux-x64.deb"

    - name: Upload Linux Installer
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-linux-x64
        path: ./xk-${{ steps.set_version.outputs.VERSION }}-installer-linux-x64.deb

    - name: Create macOS Package
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        pkgbuild --root ./publish --identifier com.parkscomputing.xferkit \
                 --version ${{ steps.set_version.outputs.VERSION }} \
                 "./xk-${{ steps.set_version.outputs.VERSION }}-installer-osx-x64.pkg"

    - name: Upload macOS Installer
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-osx-x64
        path: ./xk-${{ steps.set_version.outputs.VERSION }}-installer-osx-x64.pkg

  publish-release:
    name: Publish GitHub Release
    needs: create-installers
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-assets
    - name: List release assets
      run: ls -lR release-assets
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.create-installers.outputs.version }}
        name: XferKit v${{ needs.create-installers.outputs.version }}
        prerelease: ${{ inputs.prerelease }}
        generate_release_notes: true
        files: release-assets/*

