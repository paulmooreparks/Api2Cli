{
    initScript javascript <"
        function testFunction(message) {
            console.log("Test function called with message:", message);
        }

        // JavaScript initialization script for tests
        console.log("JS init ran");

        // Helper available to JavaScript scripts
        function addNumbers(a, b) { return a + b; }
    ">

    scripts {
        echo2 {
            description "Echo two params from C# and return sum."
            arguments {
                a { type "number" description "First number." }
                b { type "number" description "Second number." }
            }
            script csharp <"
                Console.WriteLine($"a={a}, b={b}");
                return a + b;
            ">
        }

        csmessage {
            description "Run a C# script to output a message."
            arguments {
                message {
                    type "string"
                    description "A message to output."
                    default "Hello, World!"
                }
                count {
                    type "number"
                    description "The number of times to output the message."
                    default 1
                }
            }
            script csharp <"
                for (var i = 0; i < count; i++) {
                    Console.WriteLine(message);
                }

                return $"Printed the message {count} times";
            ">
        }
        jslaunch {
            arguments {
                process {
                    type "string"
                    description "The process to launch."
                }
            }
            script javascript <"
                a2c.process.run(process);
            ">
        }

        cslaunch {
            arguments {
                process {
                    type "string"
                    description "The process to launch."
                }
            }
            script csharp <"
                a2c.Process.Run(process);
            ">
        }

        jsUsesInit {
            description "Call addNumbers defined in JavaScript init."
            script javascript <"
                return addNumbers(5, 7);
            ">
        }

        </
        csUsesInit {
            description "Call addNumbers defined in C# init."
            script csharp <"
                return addNumbers(5, 7);
            ">
        }
        />
    }

    workspaces {
        demo {
            description "Sample REST API: https://jsonplaceholder.typicode.com"
            baseUrl "https://jsonplaceholder.typicode.com/"

            scripts {
                listposts {
                    description "JS: list the number of posts (GET /posts)."
                    script <'
                        let body = workspace.requests.posts.execute();
                        let arr = JSON.parse(body);
                        console.log(`There are ${arr.length} posts.`);
                        return arr.length;
                    '>
                }

                getpost {
                    description "JS: fetch a single post by id (GET /posts/{id})."
                    arguments { id { type "number" description "Post id" default 1 } }
                    script <'
                        let body = workspace.requests.post.execute(id);
                        console.log(formatJson(body));
                        return body;
                    '>
                }

                postsummary {
                    description "C#: show a tiny summary of the first post using Newtonsoft.Json (requires package)."
                    script csharp <"
                        // testFunction("Hello from C#");
                        // Ensure package installed: a2c package install newtonsoft.json
                        var raw = (string)workspace.requests.posts.execute();
                        var arr = Newtonsoft.Json.Linq.JArray.Parse(raw);
                        var first = arr.FirstOrDefault();
                        if (first == null) return "No posts";
                        Console.WriteLine($"#{first.Value<int>("id")}: {first.Value<string>("title")}");
                        return Newtonsoft.Json.JsonConvert.SerializeObject(first, Newtonsoft.Json.Formatting.Indented);
                    ">
                }

                cstest {
                    description "C#: test."
                    script csharp <"
                        // testFunction("Hello from C#");
                    ">
                }

                jstest {
                    description "JavaScript: test."
                    script javascript <"
                        testFunction("Hello from JavaScript");
                    ">
                }
            }

            requests {
                posts {
                    endpoint "/posts"
                    method "GET"
                    headers { Accept "application/json" }
                }

                post {
                    endpoint "/posts/{{[arg]::id}}"
                    method "GET"
                    headers { Accept "application/json" }
                    arguments { id { type "number" description "Post id" } }
                }

                createpost {
                    endpoint "/posts"
                    method "POST"
                    headers { Content-Type "application/json" }
                    arguments {
                        title { type "string" description "Post title" default "hello" }
                        body { type "string" description "Post body" default "lorem ipsum" }
                        userId { type "number" description "User id" default 1 }
                    }
                    payload <'{ "title": "{{[arg]::title}}", "body": "{{[arg]::body}}", "userId": {{[arg]::userId}} }'>
                }
            }
        }
    }
}
